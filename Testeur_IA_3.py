#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# multirobot.py
# Contact (ce fichier uniquement): nicolas.bredeche(at)upmc.fr
# 
# Description:
#   Template pour simulation mono- et multi-robots type khepera/e-puck/thymio
#   Ce code utilise pySpriteWorld, développé par Yann Chevaleyre (U. Paris 13)
# 
# Dépendances:
#   Python 2.x
#   Matplotlib
#   Pygame
# 
# Historique: 
#   2016-03-28__23:23 - template pour 3i025 (IA&RO, UPMC, licence info)
#
# Aide: code utile
#   - Partie "variables globales"
#   - La méthode "step" de la classe Agent
#   - La fonction setupAgents (permet de placer les robots au début de la simulation)
#   - La fonction setupArena (permet de placer des obstacles au début de la simulation)
#   - il n'est pas conseillé de modifier les autres parties du code.
# 

from robosim import *
from random import random, shuffle
import time
import sys
import atexit
from itertools import count
import math


'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''
'''  Aide                 '''
'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''

#game.setMaxTranslationSpeed(3) # entre -3 et 3
# size of arena: 
#   screenw,screenh = taille_terrain()
#   OU: screen_width,screen_height

'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''
'''  variables globales   '''
'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''

game = Game()

agents = []
screen_width=512 #512,768,... -- multiples de 32  
screen_height=512 #512,768,... -- multiples de 32
nbAgents = 8

maxSensorDistance = 30              # utilisé localement.
maxRotationSpeed = 5
maxTranslationSpeed = 1

SensorBelt = [-170,-80,-40,-20,+20,40,80,+170]  # angles en degres des senseurs (ordre clockwise)

maxIterations = -2000 # infinite: -1

showSensors = True
frameskip = 0   # 0: no-skip. >1: skip n-1 frames
verbose = True

'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''
'''  Classe Agent/Robot   '''
'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''

class Agent(object):
    
    agentIdCounter = 0 # use as static
    id = -1
    robot = -1
    name = "Equipe Alpha" # A modifier avec le nom de votre équipe
#    #  params=[-2.041029640258164, 8.044421446559417, -9.945429475407115, 4.991189055006943, -7.011122925677561, -9.054646172373516, 0.9324256959331514, 0.0014764460104885193, -4.028351310512255, 7.168242532221037, 2.9656134361277355, -7.0707735065180195, 7.061615219184872, -6.044184357495783, -7.992959122040039, -7.940400330531676, 9.010219512644802, -5.994535925334198, -1.032645208437086, -3.9870516468026946, 1.0668440710331688, -1.0403381523321151, -0.028254456646060147]
#       params=[-2.0052560293128647, 2.0157116558097985, 6.020862400536977, -8.98244563840465, -7.0021647981714805, -6.950756107462722, -7.127641592206986, -3.0787961994523196, 9.931621046483214, 0.004388277540944769, -2.0345653501425827, 8.997755552778214, -9.958615050551602, -6.005415841283025, 9.009354085719076, 3.9874030025046787, -6.0374762237126, 0.9958056602051092, 1.9598931612710793, -6.02671997099267, 4.985989495793484, 3.9974629092261926, 0.022952067534149818]

    params=[-10, -10, -9.002097306370697, -4.962258902264348, 2.011009362529159, -9.9697866772376, 8.957053855431674, 6.075628396902251, 8.02524323018408, -8.995092750944965, -9.040654578163535, -3.9682876621608316, -4.984326453791683, -3.005976977476019, 3.9507333329406755, -8.98693445307505, 7.003393898510041, 1.0340805259858141, 6.0148769647501625, 1.993807317990305, 6.94319307315131, -6.994750747841919, 0.01763456082885703]
##    


#

#
#
    params=[-10, -9.996478921948363, -9.026072152826929, -4.945537351805107, 2.0096188063899145, -9.956193862523737, 8.956353594753311, 6.076523867904889, 8.010896828681707, -9.002792713734662, -9.031347067423384, -3.947429927597429, -4.976865495536029, -3.006486908362628, 3.936208002917772, -8.988074526994078, 6.985829663425059, 1.021551247297489, 6.0063776189260185, 1.9920638759249247, 6.933358705791426, -6.997244271373039, 0.02484509115822902]
#
#
#
#
#
#
#    
#    
##LONGER MUR / A TESTER :
#    params=[-3.9787143744832933, -6.009956102150794, 7.008726770110197, -9.995909147138729, -3.9330528821400788, 2.959625669306225, -1.025594899995809, 5.978745917771005, 4.980454097588744, 9.058587835775016, 6.015698963176245, -7.034387964072623, 6.988108747168075, 5.030122683814439, -4.000419576024685, 9.015297216766905, 6.9986600805965935, 0.9568831060292271, -3.9781748998794493, 8.973554028703369, 6.044702033006805, 3.983837050827255, -3.9897313069623848] #1593
#    params=[-3.996858413200421, -6.025087150976255, 6.951147083168962, -10, -3.9455537089966706, 2.896351356543612, -1.061920134232303, 5.968207252342106, 4.953917851253633, 9.124164155055201, 6.016240682545492, -7.01931521864976, 6.996389960171113, 5.004233518305914, -3.9899040821216047, 8.975127996778703, 6.984222989625268, 0.9755696270668259, -3.9478473121989417, 8.91792675282354, 6.016877924069533, 4.000426799449815, -4.0268741743625975]
#    params=[-4.086167170950773, -6.038431058494292, 7.181717000814547, -9.996810957500145, -4.096088341360433, 2.9025837359974056, -1.1459248815946896, 5.840940909524983, 4.882253501819742, 9.015186967705832, 6.007115140748101, -7.05062465600116, 6.990188382106539, 5.016101439746036, -3.9442216557519902, 9.010315955234221, 6.93679601218957, 1.016186562032669, -3.984532656399388, 8.923858574715565, 6.020989356764953, 3.969685343129087, -4.015624458330414]
#    
#
#
#    params=[-3.9820428351791355, -6.008188180847153, 7.03193939617244, -9.99894618239644, -3.9457824449752996, 2.971839310695758, -1.0071105928096777, 5.97069259427151, 5.02516827592687, 9.086548448223008, 5.9656452218879075, -7.065652210585978, 7.052751858300914, 5.062960826893152, -4.0074734012500635, 9.020698083174432, 7.027298539233953, 0.9910116846217941, -3.913023642363728, 8.933332228219012, 6.0444710503430095, 3.9162076922327853, -3.9958448729686444] #a tester interressant
#    params=[-3.0219433710705013, 8.959038371792678, 0.9836232069426128, -9.050712750723042, -2.9228756896007546, 2.9657429212186828, 0.9939042887144703, 6.906434184690219, -5.063784595249336, -6.969713672004016, -3.0301733871181527, -5.94635797872703, -9.986723024831894, 4.0215869110375095, -5.979864712888135, 2.976429458018818, 3.9200676317958494, 2.010465712272892, 9.981278107640843, -6.0557951929106375, -6.970700294530509, 1.0128101601347934, 5.009307990437019]
#    #    params=[1.0272668034335857, -8.983991046582906, -1.9943531696134371, -9.040900037992934, -3.035962025176927, -4.986452648818641, 1.0095574143837018, 9.981018392911883, 7.987289803162753, -7.992557945946904, -8.959123643886793, -0.9944826585607973, 3.9793751690132084, 5.97435343191903, -7.03200510684434, 0.009871142885041501, -3.0088222302232204, -0.0019475493248665389, -8.981708039025973, 8.989004575762676, 3.016875251013645, -4.015265998859913, -0.003037597472103964]
#    
#
#
##samedi:
#    
##    params=[-7.9997107013462365, -6.03423154550541, -4.014630148982387, 1.9282249427601625, 2.999274688923716, 2.017890542127552, 6.997681813681093, 10, -5.01346156326993, 0.005688963086663748, 7.989502759256635, 4.057536041887257, 0.018399456870054315, 9.93046129406745, -9.022700106130273, -3.0224684634800463, -7.957407431950219, 5.067410571711414, 5.9807241978479, 8.013607450594195, 9.02738362681723, -9.94255597008691, 0.09426359010262218] #500 mais longe en effet le mur.. pas de tres proche
#    params=[-5.939768500776694, -1.9942856227786998, -0.012405091857067002, -6.943057070097864, -5.040273418873003, -6.020997765231047, -1.9496328497042765, 10, 2.007886547076792, -3.934715477485454, -3.0474058906718553, 2.961180225397951, 0.961095579334239, 3.007786534497113, -6.981103864932946, 6.020496697760145, -2.0370752340995066, 4.0179431399227825, -0.9258705467211268, 2.0522820674295956, 2.961254014688343, -9.051243043032498, 7.971730200350687]#1373++++ a l air de bien longer le mur
#    
#    params=[-5.9028735886401975, -2.0052977246805925, -0.012024568804512484, -6.965207569803859, -5.084839820652308, -5.962012308830029, -1.88686027675354, 9.98740723719312, 2.044260754918573, -3.9266895665124126, -3.0578875717218663, 2.9517108768378493, 0.9756260025093855, 3.0259151345945874, -6.998216373044014, 6.017643704692513, -2.068205923099395, 4.05715028357407, -0.9214246295700573, 2.0578748033429464, 2.9864792138270917, -9.03099982956116, 7.9712824446474855]
#    params=[-5.9549710985163475, -2.00337357513924, -0.01795930783380267, -6.924988883523465, -5.05203783395789, -6.004635118266316, -1.9312231136153422, 9.994209575868567, 2.0007111082211817, -3.932759680902203, -3.053563836462231, 2.927933329418209, 0.9312132365888915, 3.018008117083879, -6.969730181716181, 6.014572794365295, -2.02174871976566, 4.018868145163768, -0.9390389537085173, 2.0552416766427664, 2.9358459519230897, -9.05087854439375, 7.9973566599362185]
#
#
#
#
#    params=[-8.951749905438453, 4.030713022005705, -7.1211701244641326, 2.925286824847905, 5.062091761125939, -1.916617825299343, -9.982505644195713, -9.009452115658373, -6.087954200600871, 7.011464254478266, -9.957071390831478, 8.984053032860853, -9.967040351379918, -3.134154151719761, 9.99577498966405, 8.960519633805454, 4.918785029306034, -9.045806877794828, -4.9562980883956005, -0.937399295468202, -7.988249439483391, -1.9580834937316676, 1.97456044985871]
#    params=[-1.9737088472082032, 1.9850048230738786, 3.0444729389761416, 6.988163327966548, -8.033267989504722, 9.957147596605093, 0.9715280223474378, 1.011122773723038, 5.040062159884159, 3.9424671910148623, 1.023164658951101, 5.954405315033341, -5.051949441449208, -1.907249645222668, -9.04404963770212, 9.022568501864695, -6.977464382198587, 1.9826378973089833, 2.0916407919952857, -1.0487731919682315, 4.990438288733586, -4.003479746651044, -4.992842486048701] #a tester
#    
#    params=[8.946977698295576, 4.011711004058407, -1.046283960946858, -2.984269908533, -6.97833133188538, 4.086024427097666, -9.965086793210006, 9.953131072531562, -1.0095840194736665, -6.906841351936692, -5.001118437222793, -8.979669946814413, 1.9753115567049715, -3.138859943639227, -9.032146045039667, -2.0488213005617837, 7.998562208353867, 5.90906551601519, -8.994753156461167, 7.910676295524535, 5.957050992376731, -5.977848907415885, -5.992325853512175]
#
#    params=[4.96015190429491, -9.98990882883594, -7.9470554827688575, -1.0116500126678836, -2.9913650054921184, 3.946793730718338, 1.9929312108243786, 9.975759829517171, -4.037770167249041, 4.976599715160712, 5.970309086160834, 6.994432827659969, 1.9812555848078621, -1.9604983179065905, 6.017176729262114, 7.021318478020943, 4.961130756180054, 9.981456896077852, -5.001539189993475, -2.9485889117338577, 9.020982161584492, -2.931220976355554, 2.9813393294485606]
#
#    pamars=[3.033476075724874, 5.991234051504645, -5.046505434133194, 8.103182409769293, -6.0796547390546, -4.963730999279654, -0.9383973727962701, 3.0330747478241746, 0.11715303368157015, 4.061226835021008, -1.9456151741591994, 4.944321359863206, -9.095820959135526, 0.058460130028614915, 3.0185961897426354, -1.0363817119211634, 3.9690370471021077, 3.0434515409927325, 2.9483743972224077, -9.98139570152895, 5.001814134887825, 0.9772380496164483, -6.054773135355143]

    params=[-7.006966838463282, -6.975438539389979, 9.98210267444115, 1.060758859417542, -1.931584154492527, 9.975222085530358, 4.048599888837661, -0.9764758777850202, -4.028940352180655, 2.095237133923462, -6.958268605815184, -9.022999331456676, -2.0250314698868714, 0.08298130535139811, -0.0636799386491057, -5.975601180235712, 9.957990708854398, 3.8997547494347264, -1.0636510880041037, 1.0344688913130469, 9.002361345930622, -8.929702402021062, -8.989006675199096]
    def __init__(self,robot):
        self.id = Agent.agentIdCounter
        Agent.agentIdCounter = Agent.agentIdCounter + 1
        #print "robot #", self.id, " -- init"
        self.robot = robot
        
    def getRobot(self):
        return self.robot

    # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    def step(self):


        #print "robot #", self.id, " -- step"
        p = self.robot
        if iteration==0:
            p.set_position(498,308 )
            p.oriente(180)
        
        sensor_infos = sensors[p]
        
        neurone1 = 0
        neurone2 = 0
 
        k = 0
        
        for i in range(len(SensorBelt)):
            dist = sensor_infos[i].dist_from_border/maxSensorDistance
            neurone1 += dist * self.params[k]
            k = k + 1
        neurone1+= 1.0* self.params[k]
        k=k+1

        for i in range(len(SensorBelt)):
            dist = sensor_infos[i].dist_from_border/maxSensorDistance
            neurone2 += dist * self.params[k]
            k = k + 1
        neurone2+=1.0 * self.params[k]
        k+=1

        neurone1=(1.0+math.tanh(neurone1))/2
        neurone2=(1.0+math.tanh(neurone2))/2

            
        translation=self.params[k]*neurone1+self.params[k+1]*neurone2+self.params[k+2]
        k+=2
        rotation=self.params[k]*neurone1+self.params[k+1]*neurone2+self.params[k+2]
        #print "r =",rotation," - t =",translation
        self.setRotationValue( min(max(rotation,-1),1) )
        self.setTranslationValue( min(max(translation,-1),1) )
        


        return
            
            
            
        return

    # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    # =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    def setTranslationValue(self,value):
        if value > 1:
            #print "[WARNING] translation value not in [-1,+1]. Normalizing."
            value = maxTranslationSpeed
        elif value < -1:
            #print "[WARNING] translation value not in [-1,+1]. Normalizing."
            value = -maxTranslationSpeed
        else:
            value = value * maxTranslationSpeed
        self.robot.forward(value)

    def setRotationValue(self,value):
        if value > 1:
            #print "[WARNING] translation value not in [-1,+1]. Normalizing."
            value = maxRotationSpeed
        elif value < -1:
            #print "[WARNING] translation value not in [-1,+1]. Normalizing."
            value = -maxRotationSpeed
        else:
            value = value * maxRotationSpeed
        self.robot.rotate(value)


'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''
'''  Fonctions init/step  '''
'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''

def setupAgents():
    global screen_width, screen_height, nbAgents, agents, game

    # Make agents
    nbAgentsCreated = 0
    for i in range(nbAgents):
        while True:
            p = -1
            while p == -1: # p renvoi -1 s'il n'est pas possible de placer le robot ici (obstacle)
                p = game.add_players( (random()*screen_width , random()*screen_height) , None , tiled=False)
            if p:
                p.oriente( random()*360 )
                p.numero = nbAgentsCreated
                nbAgentsCreated = nbAgentsCreated + 1
                agents.append(Agent(p))
                break
    game.mainiteration()


def setupArena():
    for i in range(6,13):
        addObstacle(row=3,col=i)
    for i in range(3,10):
        addObstacle(row=12,col=i)
    addObstacle(row=4,col=12)
    addObstacle(row=5,col=12)
    addObstacle(row=6,col=12)
    addObstacle(row=11,col=3)
    addObstacle(row=10,col=3)
    addObstacle(row=9,col=3)
    return
    
#    for i in range(0,8):
#        if i != 1:
#            addObstacle(row=i,col=7)
#    for i in range(8,16):
#        if i != 14:
#            addObstacle(row=i,col=8)
#    return



def stepWorld():
    # chaque agent se met à jour. L'ordre de mise à jour change à chaque fois (permet d'éviter des effets d'ordre).
    shuffledIndexes = [i for i in range(len(agents))]
    shuffle(shuffledIndexes)     ### TODO: erreur sur macosx
    for i in range(len(agents)):
        agents[shuffledIndexes[i]].step()
    return


'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''
'''  Fonctions internes   '''
'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''

def addObstacle(row,col):
    # le sprite situe colone 13, ligne 0 sur le spritesheet
    game.add_new_sprite('obstacle',tileid=(0,13),xy=(col,row),tiled=True)

class MyTurtle(Turtle): # also: limit robot speed through this derived class
    maxRotationSpeed = maxRotationSpeed # 10, 10000, etc.
    def rotate(self,a):
        mx = MyTurtle.maxRotationSpeed
        Turtle.rotate(self, max(-mx,min(a,mx)))

def onExit():
    print "\n[Terminated]"

'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''
'''  Main loop            '''
'''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''

init('vide3',MyTurtle,screen_width,screen_height) # display is re-dimensioned, turtle acts as a template to create new players/robots
game.auto_refresh = False # display will be updated only if game.mainiteration() is called
game.frameskip = frameskip
atexit.register(onExit)

setupArena()
setupAgents()
game.mainiteration()

iteration = 0
while iteration != maxIterations:
    # c'est plus rapide d'appeler cette fonction une fois pour toute car elle doit recalculer le masque de collision,
    # ce qui est lourd....
    sensors = throw_rays_for_many_players(game,game.layers['joueur'],SensorBelt,max_radius = maxSensorDistance+game.player.diametre_robot() , show_rays=showSensors)
    stepWorld()
    game.mainiteration()
    iteration = iteration + 1
